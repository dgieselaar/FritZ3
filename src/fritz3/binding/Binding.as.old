package fritz3.binding {
	import fritz3.base.injection.Injectable;
	/**
	 * ...
	 * @author Dario Gieselaar
	 */
	public class Binding {
		
		public var host:Object;
		public var chain:Object;
		
		public var site:Object;
		public var target:Object;
		
		protected var _hostAccessType:String;
		protected var _cachedHostProperty:String;
		protected var _cachedHostMethod:Function;
		protected var _cachedHostInjectable:Injectable;
		
		protected var _targetAccessType:String;
		protected var _cachedTargetProperty:String;
		protected var _cachedTargetMethod:Function;
		protected var _cachedTargetInjectable:Injectable;
		
		public function Binding ( host:Object = null, chain:Object = null, site:Object = null , target:Object = null, hostAccessType:String = null, targetAccessType:String = null ):void {
			this.host = host;
			this.chain = chain;
			this.site = site;
			this.target = target;
			
			_hostAccessType = hostAccessType;
			_targetAccessType = targetAccessType;
			
			this.invalidate();
		}
		
		private function invalidate ( ):void {
			if (this.host && this.chain && this.site && this.target) {
				this.getAccessTypes();
				this.cache();
			}
		}
		
		protected function getAccessTypes ( ):void {
			
			if (!_hostAccessType) {
				if (this.chain is Function) {
					_hostAccessType = AccessType.METHOD;
				} else {
					_hostAccessType = AccessType.ACCESSOR;
				}
			}
			
			if (!_targetAccessType) {
				if (this.site is Function) {
					_targetAccessType = AccessType.METHOD;
				} else {
					_targetAccessType = AccessType.ACCESSOR;
				}
			}
			
		}
		
		protected function cache ( ):void {
			switch(_hostAccessType) {
				case AccessType.ACCESSOR:
				_cachedHostProperty = String(host[chain]);
				break;
				
				case AccessType.METHOD:
				_cachedHostMethod = Function(host[chain]);
				break;
				
				case AccessType.INJECTABLE:
				_cachedHostInjectable = Injectable(host);
				_cachedHostProperty = String(host[chain]);
				break;
			}
			
			switch(_targetAccessType) {
				case AccessType.ACCESSOR:
				_cachedTargetProperty = String(host[chain]);
				break;
				
				case AccessType.METHOD:
				_cachedTargetMethod = Function(host[chain]);
				break;
				
				case AccessType.INJECTABLE:
				_cachedTargetInjectable = Injectable(host);
				_cachedHostProperty = String(host[chain]);
				break;			
			}
		}
		
		public function unbind ( ):void {
			this.host = this.chain = this.site = this.target = null;
			
			_cachedHostInjectable = null;
			_cachedHostMethod = null;
			_cachedHostProperty = null;
			
			_cachedTargetInjectable = null;
			_cachedTargetMethod = null;
			_cachedTargetProperty = null;
		}
		
		public function commitChange ( ):void {
			var value:* = this.getValue();
			this.setValue(value);
		}
		
		public function getValue ( ):* {
			var value:*;
			switch(_hostAccessType) {
				case AccessType.ACCESSOR:
				value = this.host[_cachedHostProperty];
				break;
				
				case AccessType.METHOD:
				value = _cachedHostMethod.apply(host);
				break;
				
				case AccessType.INJECTABLE:
				value = _cachedHostInjectable.getProperty(_cachedHostProperty);
				break;
			}
			
			return value;
		}
		
		public function setValue ( value:* ):void {
			switch(_targetAccessType) {
				case AccessType.ACCESSOR:
				this.target[_cachedTargetProperty] = value;
				break;
				
				case AccessType.METHOD:
				_cachedTargetMethod.call(target, this);
				break;
				
				case AccessType.INJECTABLE:
				_cachedTargetInjectable.setProperty(_cachedTargetProperty, value);
				break;
			}
		}
		
	}

}